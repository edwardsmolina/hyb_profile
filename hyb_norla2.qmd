---
format:
  pdf:
    toc: false
    number-sections: true
    colorlinks: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
pacman::p_load(tidyverse, rio, factoextra, missMDA, FactoMineR)

add_mosaic <- function() {
  list(
    geom_tile(),
    geom_text(),  
    scale_x_discrete(position = "top", expand = c(0, 0, 0, 1)),
    scale_fill_viridis_c(direction = -1, begin = .3, end =.9),
    theme(axis.text.x=element_text(angle=60, hjust = 0, vjust=1)),
    coord_equal(expand = 0)
  )
}
```

# ME2 

```{r}
raw %>% str
raw$pipeline %>% unique
raw %>% 
  filter(pipeline=="ME2 - MID_ALTITUDE") %>% 
  select(-type, -brand, -pipeline) %>% 
  pivot_longer(-geno) %>% 
  ggplot() +
  aes(y=geno, x=name, fill=value, label=round(value,1 )) + 
  add_mosaic()
```

```{r}
dat <- raw %>% column_to_rownames("geno")  %>% 
  filter(pipeline=="ME2 - MID_ALTITUDE") %>% 
  select(-type, -brand, -pipeline) 
```

```{r}
## First the number of components has to be chosen
## (for the imputation step)
nb <- estim_ncpPCA(dat, ncp.max=4) ## Time consuming, nb = 2
## Imputation
```


```{r}
res.comp <- imputePCA(dat, ncp=0)
```


```{r}
## A PCA can be performed on the imputed data
res.pca <- PCA(res.comp$completeObs, scale.unit = TRUE, graph = F)
```

```{r}
fviz_pca_biplot(res.pca, repel = TRUE, # Avoid text overlapping (doesn't scale to large datasets)
                col.var = "red", # Variables color
                col.ind = "black")  # Individuals color
```

Datos completados! 

```{r}
res.comp$completeObs %>% 
  data.frame() %>%  
  mutate_if(is.numeric, round, 1) %>% 
  rownames_to_column("genotype") %>% 
  pivot_longer(-genotype) %>% 
  ggplot() +
  aes(y=genotype, x=name, fill=value, label=value) + 
  add_mosaic()
```


# ME23

```{r}
raw %>% str
raw$pipeline %>% unique
raw %>% names
raw %>% 
  filter(pipeline=="ME3 - TROPIC") %>% 
  select(-type, -brand, -pipeline) %>% 
  pivot_longer(-geno) %>% 
  ggplot() +
  aes(y=geno, x=name, fill=value, label=round(value,1 )) + 
  add_mosaic()
```

```{r}
dat3 <- raw %>% 
  column_to_rownames("geno")  %>% 
  filter(pipeline=="ME3 - TROPIC") %>% 
  select(-type, -brand, -pipeline, -Cercospora) 
```

```{r}
## First the number of components has to be chosen
## (for the imputation step)
nb3 <- estim_ncpPCA(dat3, ncp.max=4) ## Time consuming, nb = 2
## Imputation
```


```{r}
res.comp3 <- imputePCA(dat3, ncp=0)
```


```{r}
## A PCA can be performed on the imputed data
res.pca3 <- PCA(res.comp3$completeObs, scale.unit = TRUE, graph = F)
```

```{r}
fviz_pca_biplot(res.pca3, repel = TRUE, # Avoid text overlapping (doesn't scale to large datasets)
                col.var = "red", # Variables color
                col.ind = "black")  # Individuals color
```

Datos completados! 

```{r}
res.comp3$completeObs %>% 
  data.frame() %>%  
  mutate_if(is.numeric, round, 1) %>% 
  rownames_to_column("genotype") %>% 
  pivot_longer(-genotype) %>% 
  ggplot() +
  aes(y=genotype, x=name, fill=value, label=value) + 
  add_mosaic()

```


```{r}
ME2=res.comp$completeObs %>% data.frame %>% rownames_to_column("geno")
ME3=res.comp3$completeObs %>% data.frame %>%  rownames_to_column("geno")

bind_rows(ME2, ME3, .id="pipeline") %>% export("data/norla_complete.xlsx")
```






# Datos originales  

```{r}
df <- import("data/Dataset_Tropic_FutCM_Sum.xlsx") %>% 
  janitor::clean_names() %>% 
  mutate_if(is.numeric, round, 1)
df
```

## traits scheme

```{r}
df %>% 
  count(type, season_year, trait) %>% 
  unite("env", season_year, type) %>% 
   ggplot() +
  aes(y=trait, x=env, fill=n, label=n) + 
  add_mosaic()

drop_trait = c("SPIRKKU", "EROTP_DIPDMA")
```

## hybrid scheme

```{r}
df %>% 
  count(type, season_year, commercial_name) %>%
  unite("env", season_year, type) %>%
  ggplot() +
  aes(y=commercial_name, x=env, fill=n, label=n) + 
  add_mosaic()

drop_hyb = c(str_detect("P32")|"DK410")
```


```{r}
df %>% 
  filter(trait!=drop_trait) %>% 
  filter(!str_detect(commercial_name, "P32|DK410")) %>%  
  count(type, season_year, commercial_name, trait) %>%
  unite("env", trait, season_year, type) %>%  
  ggplot() +
  aes(y=commercial_name, x=env, fill=n, label=n) + 
  add_mosaic()
```

```{r}
df %>% 
  distinct(type, season_year, field_name) %>% 
  arrange(season_year) %>% 
  group_split(type) 
```

```{r}
df_sum <- df %>% 
  group_by(commercial_name, trait, season_year, type) %>% 
  summarise(score = mean(dataset_value)) %>% 
  unite("trait_year_type", trait, season_year, type)
```


```{r}
df_matrix <- df_sum %>%  
  pivot_wider(names_from=trait_year_type, 
              values_from = score) %>% view
  column_to_rownames("commercial_name")  
```

```{r}
## First the number of components has to be chosen
## (for the imputation step)
nb <- estim_ncpPCA(dat, ncp.max=4) ## Time consuming, nb = 2
## Imputation
```


```{r}
res.comp <- imputePCA(dat, ncp=0)
```


```{r}
## A PCA can be performed on the imputed data
res.pca <- PCA(res.comp$completeObs, scale.unit = TRUE, graph = F)
```

```{r}
fviz_pca_biplot(res.pca, repel = TRUE, # Avoid text overlapping (doesn't scale to large datasets)
                col.var = "red", # Variables color
                col.ind = "black")  # Individuals color
```
